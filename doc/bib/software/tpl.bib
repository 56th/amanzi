%
% On-line resources
%
@Misc{BoxLib-web,
  title  = {BoxLib: A Block-Structured AMR framework},
  key    = {BoxLib},
  note   = {\url{https://ccse.lbl.gov/BoxLib/index.html}}
}

@Misc{CMake-web,
  title  = {{CMake}, the cross-platform build system},
  key    = {{CMake}},
  note   = {\url{http://cmake.org}}
}

@Misc{Cubit-web,
 title   = {Cubit: Geometry and Mesh Generation Toolkit},
 key     = {Cubit},
 note    = {\url{http://cubit.sandia.gov/}}
}

@Misc{DOxygen-web,
 title   = {DOxygen: Generate documentation from source code},
 key     = {DOxygen},
 note    = {\url{http://www.stack.nl/~dimitri/doxygen/index.html}}
}

@Misc{ExodusII-web,
  title  = {Exodus II: A Finite Element Data Model},
  key    = {ExodusII},
  note   = {\url{http://sourceforge.net/projects/exodusii}}
}

@Misc{ITAPS-web,
  title  = {Interoperable Technologies for Petascale Simulations},
  key    = {ITAPS},
  note   = {\url{http://www.tstt-scidac.org}}
}

@Misc{NumDiff-web,
  title  = {Numerical Differences of Files},
  key    = {NumDiff},
  note   = {\url{http://www.nongnu.org/numdiff/}},
}

@Misc{Trilinos-web,
  title  = {Trilinos Project},
  key    = {Trilinos},
  note   = {\url{http://trilinos.sandia.gov/index.html}}
}

@Misc{UnitTest++-web,
  title  = {UnitTest++: {A} lightweight unit testing framework for {C}++.},
  key    = {UnitTest++},
  note   = {\url{http://unittest-cpp.sourceforge.net}}
}

%
% Reports, Manuals, and Articles
%

%
% Cmake
%
@Book{KMartin_BHoffman_CMake-book_Kitware_2010,
  author       = {K. Martin and B. Hoffman},
  title        = {Mastering CMake, A Cross-Platform Build System},
  publisher    = {Kitware Inc.},
  year         = 2010,
  edition      = {Fifth},
  isbn         = {1-930934-22-1}
}

%
% Exodus II
%
@TechReport{GDSjaardema_etal_Exodus-II-manual_SNL_2006,
  author = 	 {G. D. Sjaardema and L. A. Schoof and V. R. Yarberry},
  title = 	 {EXODUS II: A Finite Element Data Model},
  institution  = {Sandia National Laboratories},
  address      = {Albuquerque, NM 87185},
  year = 	 2006,
  number = 	 {SAND92-2137}
}

%
%  Trilinos
%
@techreport{MAHeroux_etal_Trilinos-Overview_SNL_2003,
  title   = "{An Overview of Trilinos}",
  author  = "Michael Heroux and Roscoe Bartlett and Vicki Howle and 
             Robert Hoekstra and Jonathan Hu and Tamara Kolda and
             Richard Lehoucq and Kevin Long and Roger Pawlowski
             and Eric Phipps and Andrew Salinger and Heidi
             Thornquist and Ray Tuminaro and James Willenbring
             and Alan Williams ",
  institution = "Sandia National Laboratories",
  number = "SAND2003-2927",
  year = 2003
}

@article{MAHeroux_etal_Trilions-Overview_ACM_2005,
  author       = {Michael A. Heroux and Roscoe A. Bartlett and Vicki
                  E. Howle and Robert J. Hoekstra and Jonathan J. Hu
                  and Tamara G. Kolda and Richard B. Lehoucq and Kevin
                  R. Long and Roger P. Pawlowski and Eric T. Phipps
                  and Andrew G. Salinger and Heidi K. Thornquist and
                  Ray S. Tuminaro and James M. Willenbring and Alan
                  Williams and Kendall S. Stanley},
  title        = {An overview of the Trilinos project},
  journal      = {ACM Trans. Math. Softw.},
  volume       = 31,
  number       = 3,
  year         = 2005,
  issn         = {0098-3500},
  pages        = {397--423},
  doi          = {http://doi.acm.org/10.1145/1089014.1089021},
  publisher    = {ACM Press},
  address      = {New York, NY, USA},
  abstract     = "The Trilinos Project is an effort to facilitate the
                  design, development, integration and ongoing support
                  of mathematical software libraries within an
                  object-oriented framework for the solution of
                  large-scale, complex multi-physics engineering and
                  scienti c problems. Trilinos addresses two
                  fundamental issues of developing software for these
                  problems: (i) Providing a streamlined process and
                  set of tools for development of new algorithmic
                  implementations and (ii) promoting interoperability
                  of independently developed software.  \par Trilinos
                  uses a two-level software structure designed around
                  collections of packages. A Trilinos package is an
                  integral unit usually developed by a small team of
                  experts in a particular algorithms area such as
                  algebraic preconditioners, nonlinear solvers,
                  etc. Packages exist underneath the Trilinos top
                  level, which provides a common look-and-feel,
                  including configuration, documentation, licensing,
                  and bug-tracking.  \par Here we present the overall
                  Trilinos design, describing our use of abstract
                  interfaces and default concrete implementations. We
                  discuss the services that Trilinos provides to a
                  prospective package and how these services are used
                  by various packages. We also illustrate how packages
                  can be combined to rapidly develop new
                  algorithms. Finally, we discuss how Trilinos
                  facilitates highquality software engineering
                  practices that are increasingly required from
                  simulation software."}
}
