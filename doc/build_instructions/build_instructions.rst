==============================================
Building and Installing Amanzi 
==============================================


Building Amanzi
---------------

Amanzi depends on several external software packages (TPL) to build. Before
building Amanzi a user must either build each of these TPLs, provide
an installation path for each TPL or define the include directories and
libraries needed for each TPL. We recommend that users build all of the
TPLs using the tpl-build project. Instructions on how to use this project
are located in tpl_build_instructions.rst. Once the user has installed all
the required TPLs, the process to build Amanzi is:

* Generate build files (Makefile, XCode project files, etc.) using CMake.
* Use the build files to build Amanzi, i.e. ``make``.
  

CMake Quickstart
================

CMake is a build system generation tool available on UNIX flavor systems,
Macs and Windows. Amanzi requires CMake version 2.8.4 or higher. Visit
the www.cmake.org web page for instruction on how to install CMake. 

CMake stores configuration settings in file called CMakeCache.txt located
in the root directory of the build directory tree. A software project
defines the configuration process in CMakeLists.txt files found 
throughout the source code. Users define the settings using either
-DVAR:TYPE=VALUE syntax when executing cmake or these settings are
defined in an initialization file and then this file can be passed to cmake
with the -C option. Since there are a large number of configuration 
settings required to build Amanzi, we recommend that users create
CMake initialization files to store these values. Examples of these 
files can be found under the config directory. The file amanzi-tpl-config.cmake
is a template file to define the TPL installation paths. This file
is automatically generated by the Amanzi TPL-Build project. The other
file, amanzi-build-config.cmake, contain Amanzi build options. Once a
user has these files defined, the command 

cmake -C amanzi-tpl-config.cmake -C amanzi-build-config.cmake /path/to/amanzi

will generate build files. Any variable defined in these files can be over 
ridden with a -DVAR:TYPE=VALUE option following the -C option.

Some useful variables that can be added to the initialization files or
passed in as a configuration setting on the command line are

* CMAKE_INSTALL_PREFIX installation prefix for Amanzi,
* CMAKE_<language>_FLAGS add <language> compile flags where language is
  C, CXX (C++) or Fortran.
* CMAKE_BUILD_TYPE a string value of Debug or Release that controls optimized
  (Release) or debug (Debug) builds.
* BUILD_SHARED_LIBS a boolean flag (ON,OFF) that controls if shared libraries
  are built.

For more CMake documentation, run 'cmake --help-html' to produce the
HTML documentation.


Amanzi TPL Configuration Settings
=================================

We recommend that users build all the TPLs using the Amanzi TPL-Build project.
This will create a CMake file that will initialize the cache settings for all 
the TPLs. Instructions is this section are designed for advanced users. 

The Amanzi CMake files search for each TPL through the CMake find_package function.
Each TPL has a search path defined by the variable <TPL_Name>_DIR where
TPL_Name is the name of the package. The Amanzi CMake files search for the
appropriate include directories and libraries for this package. The search
also includes searching for dependent packages. For example, searching for
ASCEM-IO also triggers a search for HDF5 since ASCEM-IO depends on HDF5. 
The exception to this variable naming convention is Boost. In this case,
Amanzi uses the CMake FindBoost module found in the CMake installation
and this module defines that search path with Boost_ROOT. See 
cmake --help-module FindBoost for more information on this module.

Users can bypass the package search by defining the <TPL_Name>_INCLUDE_DIRS
and <TPL_Name>_LIBRARIES variables. These variables should contain the full
path name of the include directories and libraries for that TPL and ANY
dependent package the TPL requires to build and link against. For example,
if you want to bypass the ExodusII search logic, then define
ExodusII_INCLUDE_DIRS and ExodusII_LIBRARIES and these variables must
also contain the NetCDF include directories and libraries. These variables
are CMake list types. Each directory or filename should be separated with 
a semicolon.

Amanzi Build Configuration Settings
===================================

The naming convention for Amanzi build options is ENABLE_<Feature_Name>
and is a boolean type (ON,OFF). The current build options with the default values
are documented here.


ENABLE_Structured:

        :Default: OFF
        :Description: Build structured mesh capability. 
        :Dependencies: CCSE


ENABLE_Unstructured:

        :Default: OFF
        :Description: Build unstructured mesh capability.
        :Dependencies: At leat one of the mesh frame works, STK, MSTK or MOAB.


ENABLE_DBC:

        :Default: ON
        :Description: Enable design by contract build.
        :Dependencies:


ENABLE_CGNS:

        :Default: OFF
        :Description: Build support to create CGNS visualization files.
        :Dependencies: CGNS, requires a specific version. See Software Requirements
                       for more information.


ENABLE_Config_Report:

        :Default: ON
        :Description: Print out configuration report to the terminal.
        :Dependencies:


ENABLE_STK_Mesh:

        :Default: OFF
        :Description: Build the Sierra ToolKit mesh frame work.
        :Dependencies: Trilinos with STK enabled.


ENABLE_MSTK_Mesh:

        :Default: OFF
        :Description: Build the MSTK mesh frame work.
        :Dependencies: MSTK


ENABLE_MOAB_Mesh:

        :Default: OFF
        :Description: Build the MOAB mesh frame work.
        :Dependencies: MOAB, requires a specific version. See
                       Software Requires for more information.


ENABLE_UnitTest:

        :Default: ON
        :Description: Build the unit test test suite.
        :Dependencies: UnitTest++


ENABLE_OpenMP:

        :Default: OFF
        :Description: Build Amanzi executables with OpenMP support.
        :Dependencies: OpenMP

                       
                       


