#  -*- mode: cmake -*-

#
# Build TPL: CURL 
#
# --- Define all the directories and common external project flags
if (NOT ENABLE_XSDK)
  define_external_project_args(CURL
                               TARGET curl
                               DEPENDS ZLIB)
else()
  define_external_project_args(CURL
                               TARGET curl
                               DEPENDS XSDK)
endif()

# add CURL version to the autogenerated tpl_versions.h file
amanzi_tpl_version_write(FILENAME ${TPL_VERSIONS_INCLUDE_FILE}
  PREFIX CURL
  VERSION ${CURL_VERSION_MAJOR} ${CURL_VERSION_MINOR} ${CURL_VERSION_PATCH})

# --- Define the configuration parameters
set(CURL_CMAKE_CACHE_ARGS "-DCMAKE_INSTALL_PREFIX:FILEPATH=${TPL_INSTALL_PREFIX}")
list(APPEND CURL_CMAKE_CACHE_ARGS "-DBUILD_SHARED_LIBS:BOOL=${BUILD_SHARED_LIBS}")

# specify preferable search path 
list(APPEND CURL_CMAKE_CACHE_ARGS "-DCMAKE_PREFIX_PATH:PATH=${TPL_INSTALL_PREFIX}")

# Search for OpenSSL is done inside CURL's cmake file

# --- Patch the original code
# Curl finds SSL, but doesn't correctly assess its dependence on dl library.
set(CURL_patch_file curl-ssl-extra-ldl.patch)
set(CURL_sh_patch ${CURL_prefix_dir}/curl-patch-step.sh)
configure_file(${SuperBuild_TEMPLATE_FILES_DIR}/curl-patch-step.sh.in
               ${CURL_sh_patch}
               @ONLY)
# configure the CMake patch step
set(CURL_cmake_patch ${CURL_prefix_dir}/curl-patch-step.cmake)
configure_file(${SuperBuild_TEMPLATE_FILES_DIR}/curl-patch-step.cmake.in
               ${CURL_cmake_patch}
               @ONLY)
# set the patch command
set(CURL_PATCH_COMMAND ${CMAKE_COMMAND} -P ${CURL_cmake_patch})


# --- Add external project build and tie to the CURL build target
ExternalProject_Add(${CURL_BUILD_TARGET}
                    DEPENDS   ${CURL_PACKAGE_DEPENDS}      # Package dependency target
                    TMP_DIR   ${CURL_tmp_dir}              # Temporary files directory
                    STAMP_DIR ${CURL_stamp_dir}            # Timestamp and log directory
                    # -- Download and URL definitions
                    DOWNLOAD_DIR ${TPL_DOWNLOAD_DIR}       
                    URL          ${CURL_URL}               # URL may be a web site OR a local file
                    URL_MD5      ${CURL_MD5_SUM}           # md5sum of the archive file
                    DOWNLOAD_NAME ${CURL_SAVEAS_FILE}      # file name to store (if not end of URL)
                    PATCH_COMMAND ${CURL_PATCH_COMMAND}       # Mods to source
                    # -- Configure
                    SOURCE_DIR   ${CURL_source_dir}    
                    CMAKE_CACHE_ARGS ${AMANZI_CMAKE_CACHE_ARGS}   # Global definitions from root CMakeList
                                     ${CURL_CMAKE_CACHE_ARGS}
                                     -DCMAKE_C_FLAGS:STRING=${Amanzi_COMMON_CFLAGS}  # Ensure uniform build
                                     -DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}
                                     -DCMAKE_CXX_FLAGS:STRING=${Amanzi_COMMON_CXXFLAGS}
                                     -DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}
                    # -- Build
                    BINARY_DIR        ${CURL_build_dir}           # Build directory 
                    BUILD_COMMAND     $(MAKE)                     # $(MAKE) enables parallel builds through make
                    BUILD_IN_SOURCE   ${CURL_BUILD_IN_SOURCE}     # Flag for in source builds
                    # -- Install
                    INSTALL_DIR      ${TPL_INSTALL_PREFIX}        # Install directory
                    # -- Output control
                    ${CURL_logging_args})

# --- Define the CURL executable  
global_set(CURL_EXECUTABLE ${TPL_INSTALL_PREFIX}/bin/curl)
