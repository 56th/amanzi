=============================================
Amanzi Third Party Library (TPL) Build System
=============================================

Introduction
------------
This project builds the required and optional TPL software for the Amanzi code
project. The build system is designed to configure and build TPLs to the
requirements documented here https://software.lanl.gov/ascem/trac/wiki/Amanzi/Building/SoftwareRequirements.

Users are required to provide the following to build

    * CMake version 2.8.6 or higher.
    * Mercurial version 0.98 or higher.
    * MPI installation with compiler wrappers. (mpicc, mpicxx, etc.)
    * OpenSSL (required to build CURL) installation. This is available on
      most UNIX flavored systems and Macs.
    * BLAS/LAPACK built and tuned to the target architecture. See the 
      Trilinos Configuration section for more information.
    * A location to install all the TPLs. The entire software stack
      will be installed in directories rooted to this directory. Since the
      download--patch-build-install cycle for each TPL is tied to a single  
      target, the user must have read and write permission for this location.
    * The build directory will need approximately 2.1 Gb of space and the 
      install directory tree requires 300 Mb.

Getting TPL-Build
-----------------

TPL-Build is a separate CMake project in the Amanzi repository. You will need 
a clone of the Amanzi repository, ::

  hg clone https://software.lanl.gov/ascem/hg/amanzi

The root directory for TPL-Build is amanzi/config/SuperBuild. 


Building TPLs
-------------

In most cases, the entire suite of TPL software can be built with the following steps

    1. Configure with cmake 
       :: 

        cmake  \
           -D CMAKE_C_COMPILER=/full/path/mpicc \
	       -D CMAKE_CXX_COMPILER=/full/path/mpicxx \
	       -D CMAKE_Fortran_COMPILER=/full/path/mpif90 \
	       -D TPL_INSTALL_PREFIX=/full/path/to/tpls
	       /full/path/to/amanzi/config/SuperBuild

    2. Build with make (in parallel if desired)::
 
        make -j n

       where n is the number of make jobs.

    3. Install with make::

        make install

The final step, make install, copies a CMake configuration file,amanzi-tpl-config.cmake,
to the install location under share/cmake that is useful when building Amanzi. 
Passing this configuration to cmake using the -C option defines all the TPL locations
needed to build amanzi.

For example ::

 cmake -C /full/path/to/amanzi-tpl-config.cmake \ 
   [Additional CMake opts] /full/path/amanzi
 
will build and link amanzi linked against the TPLs built with this 
project, reducing the need for complicated build scripts.

Invoking SuperBuild
-------------------

SuperBuild is the term the project uses to describe a complete software build, beginning
with CMake and ending at Amanzi. The work is under development, but the preliminary 
scripts and functionality is available. 

For now, we recommended users that wish to SuperBuild Amanzi do the following,

    1. Install CMake. See http://www.cmake.org for more information.

    2. Clone the Amanzi repository.
       ::
 
          hg clone https://software.lanl.gov/ascem/hg/amanzi``

    3. Configure SuperBuild 
       ::

          cmake \
               -D CMAKE_C_COMPILER=/full/path/mpicc \
	       -D CMAKE_CXX_COMPILER=/full/path/mpicxx \
	       -D CMAKE_Fortran_COMPILER=/full/path/mpif90 \
	       -D TPL_INSTALL_PREFIX=/full/path/to/install/tpls \
	       -D BUILD_Amanzi=TRUE \
	       -D Amanzi_INSTALL_PREFIX=/full/path/to/install/amanzi \
	       /full/path/to/amanzi/config/SuperBuild

    4. Build with make (in parallel if desired)
       ::

        make [-j n] amanzi

       where ``-j n`` is the number of parallel make threads.

There is a script called bootstrap.sh under development that eventually will install all
the required software, including CMake but is not ready for general use at this time.

When building Amanzi through SuperBuild, the user will see two separate build directories,
``TPL_BUILD`` and ``amanzi-build``. The TPL software is built in separate directory. If you
wish to rebuild Amanzi without rebuilding the TPLs, cd to ``amanzi-build`` and call
``make``.


Known Issues
------------

TPL build fails with any PGI compiler
+++++++++++++++++++++++++++++++++++++
We have not found a PGI C++ compiler that builds our Boost configuration
successfully. TPL build system has successfully built with GCC 4.4, 4.5 and
4.6 and Intel 11.* and Intel 12.*.

Library parallelio (ASCEM-IO) missing archive index (MacOSX)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
This bug has only been reported on Macs. Users will experience this bug
when linking the HDF5 test binaries in the Amanzi test suite. Despite a kludge
in the shell script to address this when building ASCEM-IO, this problem persists.
The work-around is to run ranlib on the installed libparallelio.a library.

Fails to locate OpenSSL in the build CURL step
++++++++++++++++++++++++++++++++++++++++++++++
CURL needs the location of OpenSSL to enable downloads from secure sites.
There is a find_package call in the CURL build definition that attempts
to find the system OpenSSL. If this find fails, define the installation 
location of OpenSSL with ``-D OPENSSL_ROOT_DIR:FILEPATH=<directory>`` when 
configuring and rerun cmake.


Trilinos Configuration
----------------------

Amanzi relies on Trilinos for basic distributed data structures, input file
handling and non-linear solvers. It is critical, for performance reasons, that
the Trilinos build point to tuned BLAS and LAPACK libraries. On most systems,
the BLAS and LAPACK libraries found in standard system libraries
(/usr/lib or /usr/lib64) are generic implementations. Nearly all large class
clusters have tuned BLAS/LAPACK libraries. Please consult the support
documentation for these machines to find the recommended libraries.

To enable a search for BLAS/LAPACK libraries, add ``-D ENABLE_BLA_Search:BOOL=TRUE``
to your cmake options. The cmake mechanism searches through a list of known vendor
supplied BLAS/LAPACK libraries. Unless, ``BLA_VENDOR`` is set, all possible vendors
are searched, and the search ceases once a valid BLAS/LAPACK library is found. If
the library is not located in a standard installation location or is not in the user's 
``LD_LIBRARY_PATH`` or ``DYLD_LIBRARY_PATH``, the set ``BLA_VENDOR_DIRS`` to the
directories containing the libraries.

Supported BLAS/LAPACK Vendors:

============= ============================================
Vendor        Description
------------- --------------------------------------------
ATLAS         Automatically Tuned Linear Algebra Software
PhiPACK       PHiPAC (Portable High Performance ANSI C)
CXML          HP Libraries
DXML          ??
SunPerf       Sun Performance Libraries
SCSL          SGI/Cray Performance Libraries
SGIMATH       ??
IBMESSL       ??
ACML          AMD Core Math Library
ACML_MP       AMD Core Math Library multi-threaded
LibSci        Cray XT/XE Science Libraries
Apple         Mac OSX Accelerate Framework
NAS           ??
Intel10_32    Intel MKL with 32bit int
Intel10_64lp  Intel MKL with 64bit int
Intel         Older versions of MKL
Generic       Generic BLAS    
============= ============================================

If the search fails during the TPL configuration or if the Trilinos configuration
fails to locate these libraries, the user can override the search by explicitly
defining the libraries with ``BLAS_LIBRARIES`` and ``LAPACK_LIBRARIES`` at
configuration time. Multiple library names should be 
separated with a semi-colon. In some cases, Intel's MKL libraries, require
additional link flags when building Amanzi. Use the ``CMAKE_EXE_LINKER_FLAGS``
configuration variable to define these additional link flags when building Amanzi.
Consult the documentation for the particular library for more information. 


Trilinos Build Configuration Files
++++++++++++++++++++++++++++++++++

TPL-Build contains Trilinos CMake configuration files for specific platforms and
compilers. The files are located under the tpl-build/cmake directory.
The file name should be defined while configuring tpl-build with the option
``-D Trilinos_Build_Config_File:STRING=<file>``. This configuration file will 
be the last CMake configuration variable passed to Trilinos, thus all the 
definitions in this file will override previous configuration definitions.


:Hopper (NERSC):

                :Compiler: Intel
		:Config File: trilinos-build-libsci-intel.cmake
		:Description: Defines the LibSci libraries as BLAS/LAPACK 
                              libraries.


:Hopper (NERSC):

                :Compiler: GNU
		:Config File: trilinos-build-libsci-gnu.cmake
		:Description: Defines the LibSci libraries as BLAS/LAPACK 
                              libraries.


