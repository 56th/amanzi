Only in trilinos-10.6.4-lipnikov-source/cmake/python: GeneralScriptSupport.pyc
Only in trilinos-10.6.4-lipnikov-source/cmake/python: TrilinosDependencies.pyc
diff -crB -x '*.xml' -x '*.html' trilinos-10.6.4-Source/packages/anasazi/src/AnasaziBasicOrthoManager.hpp trilinos-10.6.4-lipnikov-source/packages/anasazi/src/AnasaziBasicOrthoManager.hpp
*** trilinos-10.6.4-Source/packages/anasazi/src/AnasaziBasicOrthoManager.hpp	2011-03-23 09:50:02.000000000 -0600
--- trilinos-10.6.4-lipnikov-source/packages/anasazi/src/AnasaziBasicOrthoManager.hpp	2012-07-01 13:33:35.000000000 -0600
***************
*** 329,335 ****
      const ScalarType ONE = SCT::one();
      int rank = MVT::GetNumberVecs(X);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(rank,rank);
!     innerProdMat(X,X,xTx,MX,MX);
      for (int i=0; i<rank; i++) {
        xTx(i,i) -= ONE;
      }
--- 329,335 ----
      const ScalarType ONE = SCT::one();
      int rank = MVT::GetNumberVecs(X);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(rank,rank);
!     this->innerProdMat(X,X,xTx,MX,MX);
      for (int i=0; i<rank; i++) {
        xTx(i,i) -= ONE;
      }
***************
*** 346,352 ****
      int r1 = MVT::GetNumberVecs(X1);
      int r2  = MVT::GetNumberVecs(X2);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(r1,r2);
!     innerProdMat(X1,X2,xTx,MX1,MX2);
      return xTx.normFrobenius();
    }
  
--- 346,352 ----
      int r1 = MVT::GetNumberVecs(X1);
      int r2  = MVT::GetNumberVecs(X2);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(r1,r2);
!     this->innerProdMat(X1,X2,xTx,MX1,MX2);
      return xTx.normFrobenius();
    }
  
***************
*** 465,471 ****
      // Define the product Q^T * (Op*X)
      for (int i=0; i<nq; i++) {
        // Multiply Q' with MX
!       innerProdMat(*Q[i],X,*C[i],MQ[i],MX);
        // Multiply by Q and subtract the result in X
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
        *out << "Applying projector P_Q[" << i << "]...\n";
--- 465,471 ----
      // Define the product Q^T * (Op*X)
      for (int i=0; i<nq; i++) {
        // Multiply Q' with MX
!       this->innerProdMat(*Q[i],X,*C[i],MQ[i],MX);
        // Multiply by Q and subtract the result in X
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
        *out << "Applying projector P_Q[" << i << "]...\n";
***************
*** 512,518 ****
            Teuchos::SerialDenseMatrix<int,ScalarType> C2(*C[i]);
            
            // Apply another step of classical Gram-Schmidt
!           innerProdMat(*Q[i],X,C2,MQ[i],MX);
            *C[i] += C2;
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
            *out << "Applying projector P_Q[" << i << "]...\n";
--- 512,518 ----
            Teuchos::SerialDenseMatrix<int,ScalarType> C2(*C[i]);
            
            // Apply another step of classical Gram-Schmidt
!           this->innerProdMat(*Q[i],X,C2,MQ[i],MX);
            *C[i] += C2;
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
            *out << "Applying projector P_Q[" << i << "]...\n";
***************
*** 894,900 ****
          // Save old MXj vector and compute Op-norm
          //
          Teuchos::RCP<MV> oldMXj = MVT::CloneCopy( *MXj ); 
!         normMat(*Xj,origNorm,MXj);
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
          *out << "origNorm = " << origNorm[0] << "\n";
  #endif
--- 894,900 ----
          // Save old MXj vector and compute Op-norm
          //
          Teuchos::RCP<MV> oldMXj = MVT::CloneCopy( *MXj ); 
!         this->normMat(*Xj,origNorm,MXj);
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
          *out << "origNorm = " << origNorm[0] << "\n";
  #endif
***************
*** 903,909 ****
            // Apply the first step of Gram-Schmidt
  
            // product <- prevX^T MXj
!           innerProdMat(*prevX,*Xj,product,Teuchos::null,MXj);
  
            // Xj <- Xj - prevX prevX^T MXj   
            //     = Xj - prevX product
--- 903,909 ----
            // Apply the first step of Gram-Schmidt
  
            // product <- prevX^T MXj
!           this->innerProdMat(*prevX,*Xj,product,Teuchos::null,MXj);
  
            // Xj <- Xj - prevX prevX^T MXj   
            //     = Xj - prevX product
***************
*** 924,930 ****
            }
  
            // Compute new Op-norm
!           normMat(*Xj,newNorm,MXj);
            MagnitudeType product_norm = product.normOne();
            
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
--- 924,930 ----
            }
  
            // Compute new Op-norm
!           this->normMat(*Xj,newNorm,MXj);
            MagnitudeType product_norm = product.normOne();
            
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
***************
*** 945,951 ****
              // Apply the second step of Gram-Schmidt
              // This is the same as above
              Teuchos::SerialDenseMatrix<int,ScalarType> P2(numX,1);
!             innerProdMat(*prevX,*Xj,P2,Teuchos::null,MXj);
              product += P2;
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG 
              *out << "Orthogonalizing X[" << j << "]...\n";
--- 945,951 ----
              // Apply the second step of Gram-Schmidt
              // This is the same as above
              Teuchos::SerialDenseMatrix<int,ScalarType> P2(numX,1);
!             this->innerProdMat(*prevX,*Xj,P2,Teuchos::null,MXj);
              product += P2;
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG 
              *out << "Orthogonalizing X[" << j << "]...\n";
***************
*** 958,964 ****
                MVT::MvTimesMatAddMv( -ONE, *prevMX, P2, ONE, *MXj );
              }
              // Compute new Op-norms
!             normMat(*Xj,newNorm2,MXj);
              product_norm = P2.normOne();
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
              *out << "newNorm2 = " << newNorm2[0] << "\n";
--- 958,964 ----
                MVT::MvTimesMatAddMv( -ONE, *prevMX, P2, ONE, *MXj );
              }
              // Compute new Op-norms
!             this->normMat(*Xj,newNorm2,MXj);
              product_norm = P2.normOne();
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
              *out << "newNorm2 = " << newNorm2[0] << "\n";
***************
*** 996,1002 ****
          }
  
          // Check if Xj has any directional information left after the orthogonalization.
!         normMat(*Xj,newNorm,MXj);
          if ( newNorm[0] != ZERO && newNorm[0] > SCT::sfmin() ) {
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
            *out << "Normalizing X[" << j << "], norm(X[" << j << "]) = " << newNorm[0] << "\n";
--- 996,1002 ----
          }
  
          // Check if Xj has any directional information left after the orthogonalization.
!         this->normMat(*Xj,newNorm,MXj);
          if ( newNorm[0] != ZERO && newNorm[0] > SCT::sfmin() ) {
  #ifdef ANASAZI_BASIC_ORTHO_DEBUG
            *out << "Normalizing X[" << j << "], norm(X[" << j << "]) = " << newNorm[0] << "\n";
diff -crB -x '*.xml' -x '*.html' trilinos-10.6.4-Source/packages/anasazi/src/AnasaziSVQBOrthoManager.hpp trilinos-10.6.4-lipnikov-source/packages/anasazi/src/AnasaziSVQBOrthoManager.hpp
*** trilinos-10.6.4-Source/packages/anasazi/src/AnasaziSVQBOrthoManager.hpp	2011-03-23 09:50:02.000000000 -0600
--- trilinos-10.6.4-lipnikov-source/packages/anasazi/src/AnasaziSVQBOrthoManager.hpp	2012-07-01 13:30:39.000000000 -0600
***************
*** 306,312 ****
      const ScalarType ONE = SCT::one();
      int rank = MVT::GetNumberVecs(X);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(rank,rank);
!     innerProdMat(X,X,xTx,MX,MX);
      for (int i=0; i<rank; i++) {
        xTx(i,i) -= ONE;
      }
--- 306,312 ----
      const ScalarType ONE = SCT::one();
      int rank = MVT::GetNumberVecs(X);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(rank,rank);
!     this->innerProdMat(X,X,xTx,MX,MX);
      for (int i=0; i<rank; i++) {
        xTx(i,i) -= ONE;
      }
***************
*** 326,332 ****
      int r1 = MVT::GetNumberVecs(X);
      int r2 = MVT::GetNumberVecs(Y);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(r1,r2);
!     innerProdMat(X,Y,xTx,MX,MY);
      return xTx.normFrobenius();
    }
  
--- 326,332 ----
      int r1 = MVT::GetNumberVecs(X);
      int r2 = MVT::GetNumberVecs(Y);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(r1,r2);
!     this->innerProdMat(X,Y,xTx,MX,MY);
      return xTx.normFrobenius();
    }
  
***************
*** 572,578 ****
          // Compute the norms of the vectors
          {
            std::vector<MagnitudeType> normX_mag(xc);
!           normMat(X,normX_mag,MX);
            for (int i=0; i<xc; ++i) {
              normX[i] = normX_mag[i];
              invnormX[i] = (normX_mag[i] == ZERO) ? ZERO : MONE/normX_mag[i]; 
--- 572,578 ----
          // Compute the norms of the vectors
          {
            std::vector<MagnitudeType> normX_mag(xc);
!           this->normMat(X,normX_mag,MX);
            for (int i=0; i<xc; ++i) {
              normX[i] = normX_mag[i];
              invnormX[i] = (normX_mag[i] == ZERO) ? ZERO : MONE/normX_mag[i]; 
***************
*** 588,594 ****
            std::vector<MagnitudeType> nrm2(xc);
            std::cout << dbgstr << "max post-scale norm: (with/without MX) : ";
            MagnitudeType maxpsnw = ZERO, maxpsnwo = ZERO;
!           normMat(X,nrm2,MX);
            for (int i=0; i<xc; i++) {
              maxpsnw = (nrm2[i] > maxpsnw ? nrm2[i] : maxpsnw);
            }
--- 588,594 ----
            std::vector<MagnitudeType> nrm2(xc);
            std::cout << dbgstr << "max post-scale norm: (with/without MX) : ";
            MagnitudeType maxpsnw = ZERO, maxpsnwo = ZERO;
!           this->normMat(X,nrm2,MX);
            for (int i=0; i<xc; i++) {
              maxpsnw = (nrm2[i] > maxpsnw ? nrm2[i] : maxpsnw);
            }
***************
*** 600,606 ****
          }
          // project the vectors onto the Qi
          for (int i=0; i<nq; i++) {
!           innerProdMat(*Q[i],X,*newC[i],Teuchos::null,MX);
          }
          // remove the components in Qi from X
          for (int i=0; i<nq; i++) {
--- 600,606 ----
          }
          // project the vectors onto the Qi
          for (int i=0; i<nq; i++) {
!           this->innerProdMat(*Q[i],X,*newC[i],Teuchos::null,MX);
          }
          // remove the components in Qi from X
          for (int i=0; i<nq; i++) {
***************
*** 676,682 ****
            numSVQB++;
  
            // compute X^T Op X
!           innerProdMat(X,X,XtMX,MX,MX);
  
            // compute scaling matrix for XtMX: D^{.5} and D^{-.5} (D-half  and  D-half-inv)
            std::vector<MagnitudeType> Dh(xc), Dhi(xc);
--- 676,682 ----
            numSVQB++;
  
            // compute X^T Op X
!           this->innerProdMat(X,X,XtMX,MX,MX);
  
            // compute scaling matrix for XtMX: D^{.5} and D^{-.5} (D-half  and  D-half-inv)
            std::vector<MagnitudeType> Dh(xc), Dhi(xc);
diff -crB -x '*.xml' -x '*.html' trilinos-10.6.4-Source/packages/belos/src/BelosDGKSOrthoManager.hpp trilinos-10.6.4-lipnikov-source/packages/belos/src/BelosDGKSOrthoManager.hpp
*** trilinos-10.6.4-Source/packages/belos/src/BelosDGKSOrthoManager.hpp	2011-03-23 09:50:05.000000000 -0600
--- trilinos-10.6.4-lipnikov-source/packages/belos/src/BelosDGKSOrthoManager.hpp	2012-07-01 13:11:04.000000000 -0600
***************
*** 348,354 ****
      const ScalarType ONE = SCT::one();
      int rank = MVT::GetNumberVecs(X);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(rank,rank);
!     innerProd(X,X,MX,xTx);
      for (int i=0; i<rank; i++) {
        xTx(i,i) -= ONE;
      }
--- 348,354 ----
      const ScalarType ONE = SCT::one();
      int rank = MVT::GetNumberVecs(X);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(rank,rank);
!     this->innerProd(X,X,MX,xTx);
      for (int i=0; i<rank; i++) {
        xTx(i,i) -= ONE;
      }
***************
*** 363,369 ****
      int r1 = MVT::GetNumberVecs(X1);
      int r2  = MVT::GetNumberVecs(X2);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(r2,r1);
!     innerProd(X2,X1,MX1,xTx);
      return xTx.normFrobenius();
    }
  
--- 363,369 ----
      int r1 = MVT::GetNumberVecs(X1);
      int r2  = MVT::GetNumberVecs(X2);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(r2,r1);
!     this->innerProd(X2,X1,MX1,xTx);
      return xTx.normFrobenius();
    }
  
***************
*** 707,713 ****
  	// Apply the first step of Gram-Schmidt
  	
  	// product <- prevX^T MXj
! 	innerProd(*prevX,*Xj,MXj,product);
  	
  	// Xj <- Xj - prevX prevX^T MXj   
  	//     = Xj - prevX product
--- 707,713 ----
  	// Apply the first step of Gram-Schmidt
  	
  	// product <- prevX^T MXj
! 	this->innerProd(*prevX,*Xj,MXj,product);
  	
  	// Xj <- Xj - prevX prevX^T MXj   
  	//     = Xj - prevX product
***************
*** 730,736 ****
  	  // This is the same as above
  	  Teuchos::SerialDenseMatrix<int,ScalarType> P2(numX,1);
  	  
! 	  innerProd(*prevX,*Xj,MXj,P2);
  	  product += P2;
  	  MVT::MvTimesMatAddMv( -ONE, *prevX, P2, ONE, *Xj );
  	  if ((this->_hasOp)) {
--- 730,736 ----
  	  // This is the same as above
  	  Teuchos::SerialDenseMatrix<int,ScalarType> P2(numX,1);
  	  
! 	  this->innerProd(*prevX,*Xj,MXj,P2);
  	  product += P2;
  	  MVT::MvTimesMatAddMv( -ONE, *prevX, P2, ONE, *Xj );
  	  if ((this->_hasOp)) {
***************
*** 769,775 ****
  	  MVT::MvDot( *tempXj, *tempMXj, oldDot );
  	  //
  	  for (int num_orth=0; num_orth<max_blk_ortho_; num_orth++){
! 	    innerProd(*prevX,*tempXj,tempMXj,product);
  	    MVT::MvTimesMatAddMv( -ONE, *prevX, product, ONE, *tempXj );
  	    if (this->_hasOp) {
  	      MVT::MvTimesMatAddMv( -ONE, *prevMX, product, ONE, *tempMXj );
--- 769,775 ----
  	  MVT::MvDot( *tempXj, *tempMXj, oldDot );
  	  //
  	  for (int num_orth=0; num_orth<max_blk_ortho_; num_orth++){
! 	    this->innerProd(*prevX,*tempXj,tempMXj,product);
  	    MVT::MvTimesMatAddMv( -ONE, *prevX, product, ONE, *tempXj );
  	    if (this->_hasOp) {
  	      MVT::MvTimesMatAddMv( -ONE, *prevMX, product, ONE, *tempMXj );
***************
*** 860,866 ****
      // Define the product Q^T * (Op*X)
      for (int i=0; i<nq; i++) {
        // Multiply Q' with MX
!       innerProd(*Q[i],X,MX,*C[i]);
        // Multiply by Q and subtract the result in X
        MVT::MvTimesMatAddMv( -ONE, *Q[i], *C[i], ONE, X );
  
--- 860,866 ----
      // Define the product Q^T * (Op*X)
      for (int i=0; i<nq; i++) {
        // Multiply Q' with MX
!       this->innerProd(*Q[i],X,MX,*C[i]);
        // Multiply by Q and subtract the result in X
        MVT::MvTimesMatAddMv( -ONE, *Q[i], *C[i], ONE, X );
  
***************
*** 885,891 ****
  	Teuchos::SerialDenseMatrix<int,ScalarType> C2(*C[i]);
          
  	// Apply another step of classical Gram-Schmidt
! 	innerProd(*Q[i],X,MX,C2);
  	*C[i] += C2;
  	MVT::MvTimesMatAddMv( -ONE, *Q[i], C2, ONE, X );
          
--- 885,891 ----
  	Teuchos::SerialDenseMatrix<int,ScalarType> C2(*C[i]);
          
  	// Apply another step of classical Gram-Schmidt
! 	this->innerProd(*Q[i],X,MX,C2);
  	*C[i] += C2;
  	MVT::MvTimesMatAddMv( -ONE, *Q[i], C2, ONE, X );
          
***************
*** 985,991 ****
  	Teuchos::SerialDenseMatrix<int,ScalarType> tempC( Teuchos::View, *C[i], qcs[i], 1, 0, j );
  
  	// Multiply Q' with MX
! 	innerProd(*Q[i],*Xj,MXj,tempC);
  	// Multiply by Q and subtract the result in Xj
  	MVT::MvTimesMatAddMv( -ONE, *Q[i], tempC, ONE, *Xj );
  	
--- 985,991 ----
  	Teuchos::SerialDenseMatrix<int,ScalarType> tempC( Teuchos::View, *C[i], qcs[i], 1, 0, j );
  
  	// Multiply Q' with MX
! 	this->innerProd(*Q[i],*Xj,MXj,tempC);
  	// Multiply by Q and subtract the result in Xj
  	MVT::MvTimesMatAddMv( -ONE, *Q[i], tempC, ONE, *Xj );
  	
***************
*** 1016,1022 ****
  	  Teuchos::SerialDenseMatrix<int,ScalarType> C2( qcs[i], 1 );
  	  
  	  // Apply another step of classical Gram-Schmidt
! 	  innerProd(*Q[i],*Xj,MXj,C2);
  	  tempC += C2;
  	  MVT::MvTimesMatAddMv( -ONE, *Q[i], C2, ONE, *Xj );
  	  
--- 1016,1022 ----
  	  Teuchos::SerialDenseMatrix<int,ScalarType> C2( qcs[i], 1 );
  	  
  	  // Apply another step of classical Gram-Schmidt
! 	  this->innerProd(*Q[i],*Xj,MXj,C2);
  	  tempC += C2;
  	  MVT::MvTimesMatAddMv( -ONE, *Q[i], C2, ONE, *Xj );
  	  
***************
*** 1076,1082 ****
  	    Teuchos::SerialDenseMatrix<int,ScalarType> product( qcs[i], 1 );
  	    
  	    // Apply another step of classical Gram-Schmidt
! 	    innerProd(*Q[i],*tempXj,tempMXj,product);
  	    MVT::MvTimesMatAddMv( -ONE, *Q[i], product, ONE, *tempXj );
  	    
  	    // Update MXj, with the least number of applications of Op as possible
--- 1076,1082 ----
  	    Teuchos::SerialDenseMatrix<int,ScalarType> product( qcs[i], 1 );
  	    
  	    // Apply another step of classical Gram-Schmidt
! 	    this->innerProd(*Q[i],*tempXj,tempMXj,product);
  	    MVT::MvTimesMatAddMv( -ONE, *Q[i], product, ONE, *tempXj );
  	    
  	    // Update MXj, with the least number of applications of Op as possible
diff -crB -x '*.xml' -x '*.html' trilinos-10.6.4-Source/packages/belos/src/BelosICGSOrthoManager.hpp trilinos-10.6.4-lipnikov-source/packages/belos/src/BelosICGSOrthoManager.hpp
*** trilinos-10.6.4-Source/packages/belos/src/BelosICGSOrthoManager.hpp	2011-03-23 09:50:05.000000000 -0600
--- trilinos-10.6.4-lipnikov-source/packages/belos/src/BelosICGSOrthoManager.hpp	2012-07-01 13:13:03.000000000 -0600
***************
*** 363,369 ****
      const ScalarType ONE = SCT::one();
      int rank = MVT::GetNumberVecs(X);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(rank,rank);
!     innerProd(X,X,MX,xTx);
      for (int i=0; i<rank; i++) {
        xTx(i,i) -= ONE;
      }
--- 363,369 ----
      const ScalarType ONE = SCT::one();
      int rank = MVT::GetNumberVecs(X);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(rank,rank);
!     this->innerProd(X,X,MX,xTx);
      for (int i=0; i<rank; i++) {
        xTx(i,i) -= ONE;
      }
***************
*** 378,384 ****
      int r1 = MVT::GetNumberVecs(X1);
      int r2  = MVT::GetNumberVecs(X2);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(r2,r1);
!     innerProd(X2,X1,MX1,xTx);
      return xTx.normFrobenius();
    }
  
--- 378,384 ----
      int r1 = MVT::GetNumberVecs(X1);
      int r2  = MVT::GetNumberVecs(X2);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(r2,r1);
!     this->innerProd(X2,X1,MX1,xTx);
      return xTx.normFrobenius();
    }
  
***************
*** 756,762 ****
  	  // product <- prevX^T MXj
            {
              Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	    innerProd(*prevX,*Xj,MXj,P2);
            }
  	  
  	  // Xj <- Xj - prevX prevX^T MXj   
--- 756,762 ----
  	  // product <- prevX^T MXj
            {
              Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	    this->innerProd(*prevX,*Xj,MXj,P2);
            }
  	  
  	  // Xj <- Xj - prevX prevX^T MXj   
***************
*** 815,821 ****
  	  for (int num_orth=0; num_orth<max_ortho_steps_; num_orth++){
              {
                Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	      innerProd(*prevX,*tempXj,tempMXj,product);
              }
              {
                Teuchos::TimeMonitor updateTimer( *timerUpdate_ );
--- 815,821 ----
  	  for (int num_orth=0; num_orth<max_ortho_steps_; num_orth++){
              {
                Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	      this->innerProd(*prevX,*tempXj,tempMXj,product);
              }
              {
                Teuchos::TimeMonitor updateTimer( *timerUpdate_ );
***************
*** 907,913 ****
        // Multiply Q' with MX
        {
          Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
!         innerProd(*Q[i],X,MX,*C[i]);
        }
        // Multiply by Q and subtract the result in X
        {
--- 907,913 ----
        // Multiply Q' with MX
        {
          Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
!         this->innerProd(*Q[i],X,MX,*C[i]);
        }
        // Multiply by Q and subtract the result in X
        {
***************
*** 938,944 ****
  	// Apply another step of classical Gram-Schmidt
  	{
            Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
!           innerProd(*Q[i],X,MX,C2);
          }
  	*C[i] += C2;
          {
--- 938,944 ----
  	// Apply another step of classical Gram-Schmidt
  	{
            Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
!           this->innerProd(*Q[i],X,MX,C2);
          }
  	*C[i] += C2;
          {
***************
*** 993,999 ****
        // Multiply Q' with MX
        {
          Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
!         innerProd(*Q[i],X,MX,*C[i]);
        }
        // Multiply by Q and subtract the result in X
        {
--- 993,999 ----
        // Multiply Q' with MX
        {
          Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
!         this->innerProd(*Q[i],X,MX,*C[i]);
        }
        // Multiply by Q and subtract the result in X
        {
***************
*** 1023,1029 ****
  	// Apply another step of classical Gram-Schmidt
          {
            Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	  innerProd(*Q[i],X,MX,C2);
          }
  	*C[i] += C2;
          {
--- 1023,1029 ----
  	// Apply another step of classical Gram-Schmidt
          {
            Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	  this->innerProd(*Q[i],X,MX,C2);
          }
  	*C[i] += C2;
          {
***************
*** 1127,1133 ****
  	Teuchos::SerialDenseMatrix<int,ScalarType> tempC( Teuchos::View, *C[i], qcs[i], 1, 0, j );
  
  	// Multiply Q' with MX
! 	innerProd(*Q[i],*Xj,MXj,tempC);
  	// Multiply by Q and subtract the result in Xj
  	MVT::MvTimesMatAddMv( -ONE, *Q[i], tempC, ONE, *Xj );
  	
--- 1127,1133 ----
  	Teuchos::SerialDenseMatrix<int,ScalarType> tempC( Teuchos::View, *C[i], qcs[i], 1, 0, j );
  
  	// Multiply Q' with MX
! 	this->innerProd(*Q[i],*Xj,MXj,tempC);
  	// Multiply by Q and subtract the result in Xj
  	MVT::MvTimesMatAddMv( -ONE, *Q[i], tempC, ONE, *Xj );
  	
***************
*** 1153,1159 ****
  	  Teuchos::SerialDenseMatrix<int,ScalarType> C2( qcs[i], 1 );
  	  
  	  // Apply another step of classical Gram-Schmidt
! 	  innerProd(*Q[i],*Xj,MXj,C2);
  	  tempC += C2;
  	  MVT::MvTimesMatAddMv( -ONE, *Q[i], C2, ONE, *Xj );
  	  
--- 1153,1159 ----
  	  Teuchos::SerialDenseMatrix<int,ScalarType> C2( qcs[i], 1 );
  	  
  	  // Apply another step of classical Gram-Schmidt
! 	  this->innerProd(*Q[i],*Xj,MXj,C2);
  	  tempC += C2;
  	  MVT::MvTimesMatAddMv( -ONE, *Q[i], C2, ONE, *Xj );
  	  
***************
*** 1210,1216 ****
  	    Teuchos::SerialDenseMatrix<int,ScalarType> product( qcs[i], 1 );
  	    
  	    // Apply another step of classical Gram-Schmidt
! 	    innerProd(*Q[i],*tempXj,tempMXj,product);
  	    MVT::MvTimesMatAddMv( -ONE, *Q[i], product, ONE, *tempXj );
  	    
  	    // Update MXj, with the least number of applications of Op as possible
--- 1210,1216 ----
  	    Teuchos::SerialDenseMatrix<int,ScalarType> product( qcs[i], 1 );
  	    
  	    // Apply another step of classical Gram-Schmidt
! 	    this->innerProd(*Q[i],*tempXj,tempMXj,product);
  	    MVT::MvTimesMatAddMv( -ONE, *Q[i], product, ONE, *tempXj );
  	    
  	    // Update MXj, with the least number of applications of Op as possible
diff -crB -x '*.xml' -x '*.html' trilinos-10.6.4-Source/packages/belos/src/BelosIMGSOrthoManager.hpp trilinos-10.6.4-lipnikov-source/packages/belos/src/BelosIMGSOrthoManager.hpp
*** trilinos-10.6.4-Source/packages/belos/src/BelosIMGSOrthoManager.hpp	2011-03-23 09:50:05.000000000 -0600
--- trilinos-10.6.4-lipnikov-source/packages/belos/src/BelosIMGSOrthoManager.hpp	2012-07-01 13:14:33.000000000 -0600
***************
*** 363,369 ****
      const ScalarType ONE = SCT::one();
      int rank = MVT::GetNumberVecs(X);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(rank,rank);
!     innerProd(X,X,MX,xTx);
      for (int i=0; i<rank; i++) {
        xTx(i,i) -= ONE;
      }
--- 363,369 ----
      const ScalarType ONE = SCT::one();
      int rank = MVT::GetNumberVecs(X);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(rank,rank);
!     this->innerProd(X,X,MX,xTx);
      for (int i=0; i<rank; i++) {
        xTx(i,i) -= ONE;
      }
***************
*** 378,384 ****
      int r1 = MVT::GetNumberVecs(X1);
      int r2  = MVT::GetNumberVecs(X2);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(r2,r1);
!     innerProd(X2,X1,MX1,xTx);
      return xTx.normFrobenius();
    }
  
--- 378,384 ----
      int r1 = MVT::GetNumberVecs(X1);
      int r2  = MVT::GetNumberVecs(X2);
      Teuchos::SerialDenseMatrix<int,ScalarType> xTx(r2,r1);
!     this->innerProd(X2,X1,MX1,xTx);
      return xTx.normFrobenius();
    }
  
***************
*** 750,756 ****
  	  // product <- prevX^T MXj
  	  {
  	    Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	    innerProd(*prevX,*Xj,MXj,P2);
  	  }
  	  
  	  // Xj <- Xj - prevX prevX^T MXj   
--- 750,756 ----
  	  // product <- prevX^T MXj
  	  {
  	    Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	    this->innerProd(*prevX,*Xj,MXj,P2);
  	  }
  	  
  	  // Xj <- Xj - prevX prevX^T MXj   
***************
*** 819,825 ****
  	    for (int num_orth=0; num_orth<max_ortho_steps_; num_orth++){
  	      {
  		Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 		innerProd(*prevX,*tempXj,tempMXj,P2);
  	      }
  	      {
  		Teuchos::TimeMonitor updateTimer( *timerUpdate_ );
--- 819,825 ----
  	    for (int num_orth=0; num_orth<max_ortho_steps_; num_orth++){
  	      {
  		Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 		this->innerProd(*prevX,*tempXj,tempMXj,P2);
  	      }
  	      {
  		Teuchos::TimeMonitor updateTimer( *timerUpdate_ );
***************
*** 930,936 ****
  	// Multiply Q' with MX
  	{
  	  Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	  innerProd(*tempQ,X,MX,tempC);
  	}
  	// Multiply by Q and subtract the result in X
  	{
--- 930,936 ----
  	// Multiply Q' with MX
  	{
  	  Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	  this->innerProd(*tempQ,X,MX,tempC);
  	}
  	// Multiply by Q and subtract the result in X
  	{
***************
*** 971,977 ****
  	  // Apply another step of modified Gram-Schmidt
  	  {
  	    Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	    innerProd( *tempQ, X, MX, tempC2 );
  	  }
  	  tempC += tempC2;
  	  {
--- 971,977 ----
  	  // Apply another step of modified Gram-Schmidt
  	  {
  	    Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	    this->innerProd( *tempQ, X, MX, tempC2 );
  	  }
  	  tempC += tempC2;
  	  {
***************
*** 1039,1045 ****
  	// Multiply Q' with MX
  	{
  	  Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	  innerProd( *tempQ, X, MX, tempC);
  	}
  	// Multiply by Q and subtract the result in X
  	{
--- 1039,1045 ----
  	// Multiply Q' with MX
  	{
  	  Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	  this->innerProd( *tempQ, X, MX, tempC);
  	}
  	// Multiply by Q and subtract the result in X
  	{
***************
*** 1079,1085 ****
  	  // Apply another step of modified Gram-Schmidt
  	  {
  	    Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	    innerProd( *tempQ, X, MX, tempC2 );
  	  }
  	  tempC += tempC2;
  	  {
--- 1079,1085 ----
  	  // Apply another step of modified Gram-Schmidt
  	  {
  	    Teuchos::TimeMonitor innerProdTimer( *timerInnerProd_ );
! 	    this->innerProd( *tempQ, X, MX, tempC2 );
  	  }
  	  tempC += tempC2;
  	  {
***************
*** 1191,1197 ****
  	  Teuchos::SerialDenseMatrix<int,ScalarType> tempC( Teuchos::View, *C[i], 1, 1, ii, j );
  	  
  	  // Multiply Q' with MX
! 	  innerProd(*tempQ,*Xj,MXj,tempC);
  
  	  // Multiply by Q and subtract the result in Xj
  	  MVT::MvTimesMatAddMv( -ONE, *tempQ, tempC, ONE, *Xj );
--- 1191,1197 ----
  	  Teuchos::SerialDenseMatrix<int,ScalarType> tempC( Teuchos::View, *C[i], 1, 1, ii, j );
  	  
  	  // Multiply Q' with MX
! 	  this->innerProd(*tempQ,*Xj,MXj,tempC);
  
  	  // Multiply by Q and subtract the result in Xj
  	  MVT::MvTimesMatAddMv( -ONE, *tempQ, tempC, ONE, *Xj );
***************
*** 1227,1233 ****
  	    Teuchos::SerialDenseMatrix<int,ScalarType> tempC2( Teuchos::View, C2, 1, 1, ii );
  	    
  	    // Apply another step of modified Gram-Schmidt
! 	    innerProd( *tempQ, *Xj, MXj, tempC2);
  	    MVT::MvTimesMatAddMv( -ONE, *tempQ, tempC2, ONE, *Xj ); 
  	  }
  	  
--- 1227,1233 ----
  	    Teuchos::SerialDenseMatrix<int,ScalarType> tempC2( Teuchos::View, C2, 1, 1, ii );
  	    
  	    // Apply another step of modified Gram-Schmidt
! 	    this->innerProd( *tempQ, *Xj, MXj, tempC2);
  	    MVT::MvTimesMatAddMv( -ONE, *tempQ, tempC2, ONE, *Xj ); 
  	  }
  	  
***************
*** 1295,1301 ****
  	      Teuchos::SerialDenseMatrix<int,ScalarType> tempC( Teuchos::View, product, 1, 1, ii );
  	    
  	      // Apply another step of modified Gram-Schmidt
! 	      innerProd( *tempQ, *tempXj, tempMXj, tempC );
  	      MVT::MvTimesMatAddMv( -ONE, *tempQ, tempC, ONE, *tempXj );
  	      
  	    }
--- 1295,1301 ----
  	      Teuchos::SerialDenseMatrix<int,ScalarType> tempC( Teuchos::View, product, 1, 1, ii );
  	    
  	      // Apply another step of modified Gram-Schmidt
! 	      this->innerProd( *tempQ, *tempXj, tempMXj, tempC );
  	      MVT::MvTimesMatAddMv( -ONE, *tempQ, tempC, ONE, *tempXj );
  	      
  	    }
diff -crB -x '*.xml' -x '*.html' trilinos-10.6.4-Source/packages/teuchos/src/Teuchos_RCP.hpp trilinos-10.6.4-lipnikov-source/packages/teuchos/src/Teuchos_RCP.hpp
*** trilinos-10.6.4-Source/packages/teuchos/src/Teuchos_RCP.hpp	2011-03-23 09:50:56.000000000 -0600
--- trilinos-10.6.4-lipnikov-source/packages/teuchos/src/Teuchos_RCP.hpp	2012-07-01 12:36:14.000000000 -0600
***************
*** 66,71 ****
--- 66,89 ----
  
  template<class T>
  inline
+ RCPNode* RCP_createNewRCPNodeRawPtrNonowned( T* p )
+ {
+   return new RCPNodeTmpl<T,DeallocNull<T> >(p, DeallocNull<T>(), false);
+ }
+ 
+ 
+ template<class T, class Dealloc_T>
+ inline
+ RCPNode* RCP_createNewDeallocRCPNodeRawPtr(
+   T* p, Dealloc_T dealloc, bool has_ownership_in
+   )
+ {
+   return new RCPNodeTmpl<T,Dealloc_T>(p, dealloc, has_ownership_in);
+ }
+ 
+ 
+ template<class T>
+ inline
  RCP<T>::RCP( T* p, ERCPWeakNoDealloc )
    : ptr_(p)
  #ifndef TEUCHOS_DEBUG
***************
*** 102,107 ****
--- 120,133 ----
  
  template<class T>
  inline
+ RCPNode* RCP_createNewRCPNodeRawPtr( T* p, bool has_ownership_in )
+ {
+   return new RCPNodeTmpl<T,DeallocDelete<T> >(p, DeallocDelete<T>(), has_ownership_in);
+ }
+ 
+ 
+ template<class T>
+ inline
  RCP<T>::RCP( T* p, bool has_ownership_in )
    : ptr_(p)
  #ifndef TEUCHOS_DEBUG
***************
*** 478,515 ****
  
  template<class T>
  inline
- RCPNode* RCP_createNewRCPNodeRawPtrNonowned( T* p )
- {
-   return new RCPNodeTmpl<T,DeallocNull<T> >(p, DeallocNull<T>(), false);
- }
- 
- 
- template<class T>
- inline
  RCPNode* RCP_createNewRCPNodeRawPtrNonownedUndefined( T* p )
  {
    return new RCPNodeTmpl<T,DeallocNull<T> >(p, DeallocNull<T>(), false, null);
  }
  
  
- template<class T>
- inline
- RCPNode* RCP_createNewRCPNodeRawPtr( T* p, bool has_ownership_in )
- {
-   return new RCPNodeTmpl<T,DeallocDelete<T> >(p, DeallocDelete<T>(), has_ownership_in);
- }
- 
- 
- template<class T, class Dealloc_T>
- inline
- RCPNode* RCP_createNewDeallocRCPNodeRawPtr(
-   T* p, Dealloc_T dealloc, bool has_ownership_in
-   )
- {
-   return new RCPNodeTmpl<T,Dealloc_T>(p, dealloc, has_ownership_in);
- }
- 
- 
  template<class T, class Dealloc_T>
  inline
  RCPNode* RCP_createNewDeallocRCPNodeRawPtrUndefined(
--- 504,515 ----
diff -crB -x '*.xml' -x '*.html' trilinos-10.6.4-Source/packages/thyra/src/support/operator_vector/client_support/Thyra_VectorDefaultBase_def.hpp trilinos-10.6.4-lipnikov-source/packages/thyra/src/support/operator_vector/client_support/Thyra_VectorDefaultBase_def.hpp
*** trilinos-10.6.4-Source/packages/thyra/src/support/operator_vector/client_support/Thyra_VectorDefaultBase_def.hpp	2011-03-23 09:51:00.000000000 -0600
--- trilinos-10.6.4-lipnikov-source/packages/thyra/src/support/operator_vector/client_support/Thyra_VectorDefaultBase_def.hpp	2012-07-01 12:05:45.000000000 -0600
***************
*** 272,278 ****
  #endif
    validateColRng(colRng);
    RTOpPack::ConstSubVectorView<Scalar> sv;
!   acquireDetachedView(rowRng,&sv);
  #ifdef TEUCHOS_DEBUG
    TEST_FOR_EXCEPT( sv.stride() != 1 ); // Can't handle non-unit stride yet but we could
  #endif
--- 272,278 ----
  #endif
    validateColRng(colRng);
    RTOpPack::ConstSubVectorView<Scalar> sv;
!   this->acquireDetachedView(rowRng,&sv);
  #ifdef TEUCHOS_DEBUG
    TEST_FOR_EXCEPT( sv.stride() != 1 ); // Can't handle non-unit stride yet but we could
  #endif
***************
*** 308,314 ****
  #endif
    validateColRng(colRng);
    RTOpPack::SubVectorView<Scalar> sv;
!   acquireDetachedView(rowRng,&sv);
  #ifdef TEUCHOS_DEBUG
    TEST_FOR_EXCEPT( sv.stride() != 1 ); // Can't handle non-unit stride yet but we could
  #endif
--- 308,314 ----
  #endif
    validateColRng(colRng);
    RTOpPack::SubVectorView<Scalar> sv;
!   this->acquireDetachedView(rowRng,&sv);
  #ifdef TEUCHOS_DEBUG
    TEST_FOR_EXCEPT( sv.stride() != 1 ); // Can't handle non-unit stride yet but we could
  #endif
***************
*** 332,338 ****
  #endif
    RTOpPack::SubVectorView<Scalar> sv(
      sub_mv->globalOffset(),sub_mv->subDim(),sub_mv->values(),1);
!   commitDetachedView(&sv);
    sub_mv->uninitialize();
  }
  
--- 332,338 ----
  #endif
    RTOpPack::SubVectorView<Scalar> sv(
      sub_mv->globalOffset(),sub_mv->subDim(),sub_mv->values(),1);
!   this->commitDetachedView(&sv);
    sub_mv->uninitialize();
  }
  
Only in trilinos-10.6.4-lipnikov-source: SIERRA
